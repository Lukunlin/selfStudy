■文件语法■
<?php
//My Code
?>


■超全局变量和常量■
变量
$GLOBALS					数组中存储了所有全局变量，通过变量名作为key去访问。也可以自己通过该对象申明一个全局变量，但也只能用该对象去取变量，或者可以
						使用关键字 global 引用一个全局变量到函数内，如：function ``(){ global $test }
$_SERVER					所有报文信息
$_REQUEST					用于收集 HTML 表单提交的数据
$_POST						获取收集到POST提交的表单数据集合里的制定参数数值
$_GET						获取收集到GET提交的表单数据集合里的制定参数数值
$_FILES					
$_ENV
$_COOKIE					获取客户端里带过来的cookie集合
$_SESSION					会话
常量
__FILE__					运行脚本的当前文件名
__LINE__					直接当前命令的所在行数
__CLASS__					执行当前类或者类方法的类
__METHOD__					显示当前运行所在的方法			
PHP_OS						PHP运行的操作系统
PHP_VERSION					PHP的版本


■字节单位■
						1字节 = 1byte = 1B = 8比特
						1比特 = 1bit = 1位（二进制，最小信息单位）


■数据类型■
简单类型					boolean(布尔)integer(整数)float(浮点数)string(字符串)
复合类型					array(数组对象)object(类对象)
特殊类型					resource(资源对象)NULL(空)


■PHP里的真假世界■
假：						boolean(false)
						integer和float和字符串为(0,0.0,'0')
						string为空的字符串
						array为空的数组
						NULL类型
						!!!空类对象(在php4以上版本,只要是类就不为假了)!!!
真：						不为假的都为真


■条件检测■
isset()						类似与检查变量是否有定义,为Null或者不存在都返回False
empty()						程序里的正常不存在的逻辑都返回true,包括没有任何属性的对象


■输出■
echo 						以普通形式输出文本
print						性能没echo好，但有返回值
printf						输出格式化的字符串如unicode会解析成普通字符
print_r						输出可以更好理解变量的文本
var_dump					输出结构和表示类型的对象信息文本
exit						结束脚本并且输出文本
die						结束脚本并且输出文本，和exit是指向同个方法
throw						手动抛出一个错误


■资源■
include 
require
通过 include 或 require 语句,可以将PHP文件的内容插入另一个PHP文件;
	include 和 require 语句是基本上相同的，以下为不同点
		加载方面:
			require 类似于预加载，会提前把文件需要依赖的内容加载到当前脚本后在运行（所以一般用于头部）
			include 类似于懒加载，只有代码逻辑走到这个语句的时候才会去加载内容并且执行（所以一般用户局部）
		错误处理方面:
			require 会生成致命错误（E_COMPILE_ERROR）并停止脚本
			include 只生成警告（E_WARNING），并且脚本会继续	
		

■文件操作■
文件类型（以linux为例，PHP以UNIX文件系统为模型）
block        					块设备文件，如：某个磁盘分区，软驱，光驱等
char          					字符设备，是指在I/O传输过程中以字符为单位进行传输的设备，如键盘，打印机等
dir             				目录类型，linux下，一切皆文件
fifo            				命名管道，常用于将信息从一个进程传递到另一个进程
file             				普通文件类型，如文本，或者是可执行的文件
linux          					符号链接，指向文件指针的指针文件，也就是软链，或者快捷方式
unkonwn   					未知类型

文件信息方法					(以下函数,PHP为了高性能,会对读取过的文件做缓存。所以有特殊清理缓存的函数)
clearstatcache					清理掉PHP的特殊文件缓存
filetype					获取文件类型，如果文件不存在返回false
is_file						判断是否是一个file类型
is_dir						判断是否是目录类型
is_link						判断是否是符号链接
file_exists					判断文件或目录是否存在
filesize	       				取得文件大小
is_readable	 	 			判断文件是否可读
is_writable 	 	 			判断文件是否可写
is_executable 	 				判断文件是否可执行
filectime    					获取文件创建时间
filemtime 	 	 			获取文件修改时间
fileation 	 	 	 	 	获取文件访问时间
stat 	 	 	 	 	  	获取文件大部分属性值
lstat						获取方法用户符号链接
fstat						获取方法用于资源句柄

文件读取方法
readfile					方法会读取一个文件（只读）
fopen						方法会打开一个文件（参数2为读写权限）
fread						方法会读取打开的文件(参数2为规定待读取的最大字节数)
fclose						方法会关闭开打的文件
fgetc						方法读取文件的单个字符
fgets						方法会读取文件里的单行
feof						方法检查是否已到达文件尾部
fwrite						方法写入文件
file_get_contents				方法直接获取文本内容（由fopen等fclose底层封装）


■数组■
申明数组
["无key的value默认为递增的数值为下标","指定key" => "值"]
array("如上")
操作方法
count						返回数组的长度
each						返回当前指针的key和value以array返回，并且结束把指针移动到下一个
current						返回当前指针的值
key						返回当前指针的key
next						把指针移动到下一个,并返回移动后的值
prev						把指针移动到上一个,并返回移动后的值
end						把指针移动到最后一个,并返回移动后的值
reset						把指针移动到第一个,并返回移动后的值
处理方法
array_values					返回一个过滤掉所有key为number递增的新纯数组，返回给前端的格式就是前端数组
array_keys					返回一个数组里所有key作为值的新纯数组
in_array					检查一个值是否存在于某个数组里面,返回布尔
array_search					搜索一个值是否在一个数组里，搜索成功则返回搜索到值对应的key字符串
array_flip					反转一个数组里的key和value,也就是key和value互相交互位置。如果一个值出现多次，已最后一个key作为他的值
array_reverse					将一个数组的顺序翻转,返回翻转后的新数组
array_unique					过滤掉单个数组中重复的值，返回一个没有重复值的新数组
array_diff					比对数组，把比对和被比对的数组做对比，返回比对数组里的值没有在被比对数组里出现新数组
array_filter					过滤数组方法，可以自定义回调函数来手动操作要被过滤的条件等
array_map					过滤数组方法，但和array_filter不同的是他可以同时处理多个数组，功能更加强大
array_slice					截取数组的某个值
array_splice					替换数组的某个数值
array_combine					合并两个纯数组为一个JSON数组（需要一个作为key的数组，和需要一个作为value的数组，并且需要个数一致），返回一个被合并后的新数组
array_merge					合并多个数组，如果key不是number，那么则后面的key覆盖前面的key，但如果key是纯数字下标,那么就会后面的累加数字下标作为新的数字key去保存
						也就是key是数字的value都会被保留，key是非数字的key，那么则后面的数组覆盖前面的
array + array					合并两个数组（运算语法）,和merge不同的是，不区分key，只要是有相同的key，就以前面的数组的值作为保留，没有重复的就直接合并过去
array_intersect					返回两个数组里有重复的值，返回重复值的新数组
array_push					添加一个值到被添加数组的最尾部（进栈）,返回新数组的个数。但无法指定key，并且官方指定  $arr[key] = pushValue;
array_unshift					添加一个或者多个值到被添加数组的前面（进栈）,返回新数组的个数。
array_pop					删除数组的最后一个（出栈）,返回出栈的value
array_shift					删除数组的第一个（出栈）,返回出栈的value
array_count_values				返回一个统计数组，这个数组里面记录了被统计数组所有值重复的次数
array_rand					随机从数组里取出一个或多个key的新数组并返回这个新数组
array_sum					求和，把数组里的数字类型全部相加得出并返回，类型得出的是整型就返回整型，浮点数就返回浮点数
shuffle						打乱数组的排序，返回布尔，打乱后数组的key全部都会被转成数字类型递增的纯数组


■字符串■
申明字符串
''						单引号表示一个纯字符串,不会在对字符串进行变量解析
""						双引号表示会对这个字符串进行变量的解析后返回到字符串里面
<<<EOT EOT;					以定界符形式申明一个字符串,更佳便捷的使用字符串无需担心需要转移符号
方法
trim						去掉前后空格
strlen						返回字符串的长度
mb_strlen					如上，不同的是他支持更多的编码支持
strpos						查找字符串中第一次出现的位置
mb_strpos					如上，不同的是他支持更多的编码支持
explode						传入一个字符串来作为区分点，分割出区分点为中点的数组
join | implode					如上的逆向方法，传入一个替换点，把数组的分割区连接成一个字符串
substr						截取字符串,参数为第几个开始，和截取长度，默认为全部，可支持负数
str_replace					把字符串的某个替换成传入的字符串
substr_replace					把字符串的一部分替换为另一个字符串
strtoupper					把字符串全部转换成大写
mb_strtoupper					如上，不同的是他支持更多的编码支持
strtolower					把字符串全部转换成小写
mb_strtolower					如上，不同的是他支持更多的编码支持
ucfirst						如果第一个字符是字母就转成大写
ucwords						把字符串里的每个单词的第一个字母都转换成大写
addslashes					把字符串里的单引号双引号反斜杠和NULL等字符转义成真正的字符，而不是控制符
stripslashes					如上的逆向方法，解除反斜杠
strrev						反转字符串的内容，方法返回一个新的字符串
number_format					把一个数字处理成有千分符号的数字型的字符串类型，方法返回一个新的字符串（如果要指定参数,即要完整的指定全部参数,更多参考文档）
md5						加密一个字符串返回(默认返回32位16进制), 参数2为true的话,则返回一个16位二进制数。方法直接返回一个加密后的字符串
strip_tags					过滤掉字符串里面的标签等，方法返回一个被过滤掉的新字符串
jion						把一个数组以某个字符串作为连接点,把数组的每一个都用连接点转成一个新的字符串返回


■正则regexp■				
正则的定义					定界符(表示一段表达式正则的开始和结束) 一般以//常用的定界符,但也可以使用除了字母数字和反斜杠以外的任何字符都可以作为定界符,如： # ! {} | 等
						原子 - 表示匹配的内容字符和特殊字符表达式和通用字符表达式为原子
						元字符 - 表示匹配的量的字符，如： + * [] {} 等,模式修正符组成
	   
preg_match(pat,str,[array])			根据模式检索匹配到的内容（一次匹配）,返回boolean,如果传入数组,那么匹配到的内容会被入栈到数组里			
preg_match_all					如上（但是N次匹配,只要符合模式就匹配,直至不再符合模式后结束）
preg_replace					根据正则模式替换一个字符串，更多请参考文档了
preg_replace_callback				如上,不同的是替换是一个回调函数执行的,每次匹配成功即执行一次回调函数
preg_split					根据正则模式分割一段字符串成数组，更多请参考文档了
preg_grep					根据正则模式匹配一个数组里的全部值，方法返回一个匹配到的数组
preg_quote					将字符串里面的特殊字符串都增加反斜杠，更多请参考文档了

正则表达式特殊字符大致有			. \ + * ? [ ^ ] $ ( ) { } = ! < > | : -
模式修饰符					i (PCRE_CASELESS)，表示匹配默认不分区大小写
						m (PCRE_MULTILINE) 默认情况下,PCRE认为目标字符串是由单行字符组成的(然而实际上它可能会包含多行),"行首"元字符(^)仅匹配字符串的开始位置,
							而"行末"元字符($)仅匹配字符串末尾,或者最后的换行符(除非设置了
						D  这个行为和perl相同。当这个修饰符设置之后,"行首"和"行末"就会匹配目标字符串中任意换行符之前或之后。另外,还分别匹配
							目标字符串的最开始和最末尾位置。这等同于perl的 /m 修饰符。如果目标字符串中没有"\n"字符,或者模式中没有出现(^)或($),设置这个修饰符不产生任何影响
						s (PCRE_DOTALL)如果设置了这个修饰符,模式中的点号元字符匹配所有字符,包含换行符。如果没有这个修饰符,点号不匹配换行符。这个修饰符等同于perl中的/s修饰符。 
							一个取反字符类比如[^a]总是匹配换行符,而不依赖于这个修饰符的设置
						x (PCRE_EXTENDED)如果设置了这个修饰符,模式中的没有经过转义的或不在字符类中的空白数据字符总会被忽略,并且位于一个未转义的字符类外部的#字符和
							下一个换行符之间的字符也被忽略。这个修饰符等同于perl中的/x修饰符,使被编译模式中可以包含注释。注意,这仅用于数据字符。空白字符 
								还是不能在模式的特殊字符序列中出现,比如序列
									 (?( 引入了一个条件子组(译注: 这种语法定义的 特殊字符序列中如果出现空白字符会导致编译错误。 比如(?(就会导致错误)。
						ADSUXJu等更多修饰符请参考官方文档:	http://php.net/manual/zh/reference.pcre.pattern.modifiers.php


■类型方法■
PHP里面的类型有：integer,float,string,boolean,array,object,null,resource
is_array					检查是否为数组
is_float | is_real | is_double			检查是否为浮点数
is_int | is_long | is_integer			检查是否为整数
is_string					检查是否为字符串
is_bool						检查是否为布尔值
is_object					检查是否为对象
is_resource					检查是否为一个资源
is_null						检查是否为NULL
is_scalar					检查是否为标量。即:整数，浮点数，布尔值，字符串
is_numeric					检查是否为任何类型的数字或者数字字符串
is_callable					检查是否为一个有效的函数名称
gettype						返回数据类型
settype						设置数据类型


■命名空间 namespace■				
申明命名空间
namespace 申明的空间名称（dir\public\a）	申明一个空间后，在下一个namespace关键字之前，都属于一个空间。这个时候默认使用的都是本空间下的元素和变量。
						一个文件里一般只会申明一个命名空间，但也可以申明多个。但要注意的是一段程序脚本开始之前不能有其他输出，必须是先申明一个命名空间。如果要使用命名空间的前提下才要注意。
						并且命名空间不能命名一样的名称，否则会抛错，申明的时候一般不带 \ 使用的时候要带 \
引用其他命名空间
use \dir\public\a				把另外一个命名空间引入到当前空间内。
use \dir\public\a as 别名			把另外一个命名空间引入到当前空间内，并且给定一个别名，这个别名即指定引入进来的空间
使用其他命名空间下的变量			使用作用域限定操作符::去指定具体空间下的元素和变量，例:
						$obj = new \dir\public\a\Myclass;
						$number = \dir\public\a\Myclass::reset();


■面向对象■
new						实例化一个类 new Name()
class						声明一个类 class Name {}
clone						克隆一个实例化对象，被克隆出来的新副本对象和被克隆的实例化对象没有关联关系，所以改变不会互相影响
final						定义一个终极类，表示不能再去派生类了，就是不能再有子类继承这个类
abstract					定义一个抽象类,然后在类里以abstract function 方法名(){}的方式声明的方法，子类必须实现，否则就还是一个抽象类，说明点如下：
						抽象类不能被实例化，抽象类的缺点就是因为PHP是单继承，所以只能有一个父类，那么继承了抽象以后，就没法再继承其他父类了，所以可以使用接口
interface					申明一个对象接口，弥补了PHP的单继承的缺点。一个类要继承对象接口使用
						implements关键字 去对应接口名称，并且可以对应多个接口，以"，"隔开。例：
						interface myInterface {};
						class myClass extends parentClass implements myInterface,myInterface_two,myInterface_three {};
						如果在对应对象接口的同时需要继承父类的，需要先继承父类再去对应对象接口
trait 						申明混用类（不能单独被实例化），一般在类里面使用 use 关键字去引用这个混用类，然后可以把混用类的成员元素复制到使用类身上，解决PHP只能单向继承的问题，例：
						trait myTrait {};
						class myClass extends myParentClass {
							use myTrait,myTrait_two;
						}
						覆盖优先级:
						从基类继承的成员会被 trait 插入的成员所覆盖。优先顺序是来自当前类的成员覆盖了 trait 的方法，而 trait 则覆盖了被继承的方法。
function __construct				类里面的构造函数,实例化的时候会触发这个函数
function __destruct				析构函数,和构造函数相反,销毁一个类之前触发这个函数
function __get					魔术方法,在类加入了魔术方法以后,可以在实例化后访问类的私有方法,否则在外部是不允许访问私有属性和私有方法
function __set					魔术方法,如上,没有加入魔术 方法的话,不可是对类的私有属性和私有方法做出改变
function __clone				使用关键字clone,去克隆一个类的时候,会触发这个方法
function __call					为了避免当调用的方法不存在时产生错误,声明这个方法后,类没有找到的方法都会默认调用这个方法,可以避免程序报错，停止脚本

关键字 | 运算符
static						声明一个静态变量,表示不需要new就可以访问到静态变量,除了在类里申明,也可以申明在function下,然后直接访问function下的这个变量
const						声明一个静态常量，和defined方法申明的全局常量不同，这里申明的常量是在于类下的
public (+)					声明一个公用的变量,外部可以访问,子类会继承
private (-)					声明一个私有的变量,外部不可访问(但类设置了魔术方法后可以访问)子类不会继承私有方法
protected (#)					声明一个受保护的变量,外部不可访问，子类会继承
extends						继承一个类,获得父类的所有属性和方法 class ChildClass extends ParentClass {}
parent						找到父类的方法调用,静态函数调用符一起使用 如: parent::functionName
interface  					声明接口方法的关键字,返回一个接口规范对象,一般配合implements使用
implements					声明一个类后去实现一个接口规范对象,来对象对象必须要提供的一些必要接口,不然报错,一般和interface一起使用
clone						克隆一个类的副本,而不是赋值等方式去引用相同的内存
instanceof					查看类和实例关系数的运算符,返回boolean,如: 实例名 instanceof 类名
::						作用域限定操作符,右边的取值会去取得左边的对象,和直接取右边的取值不一样的是,直接取值会取当前作用域下的值


■方法■
date(格式)					返回指定类型的时间数据
time()						返回一个当前的时间戳,单位为S
mktime()					如上，只是有更多参数。请参考官方文档
microtime()					如上,只是带毫秒的时间戳，不穿参数的时候会以 0.16722000 1513330422 的格式返回,如果带参数会直接换算进去，如：1513330422.16722
mail(to,subject,message,headers,parameters)	发送e-mail的方法
range(最小,最大,个数)				取范围，取得一个范围的数组
func_get_args()					获取函数的实参集合的array对象
function __autoload($className){}		它是一个特殊的全局魔术方法，尝试加载未定义的类,可以通过定义这个函数来启用类的自动加载


■语法■
for						递增循环,例:for($i=0;条件;$i++){}
foreach						遍历对象,专门遍历数组和对象的遍历语法,例:foreach($array as $key => $value){}
list						解析数组成变量（这个数组必须是递增的，或者可以使用array_values方法过滤过的），按照顺序解析成变量，例:list($variable,$variable_two) = array("one","two");
extract						解析数组成变量,比list灵活,把数组里所有非number的key解析成变量。例:extract(array("one"=>"1","two"=>2));  参数参考  http://www.php.net/extract


■过滤html■
htmlentities					过滤符号,转换成html的实体符号，第2参数为过滤模式，请参考手册。该方法直接返回一个过滤后的新字符串


■特殊语法■
&变量						引址运算符，把&右边的变量的地址返回给=号左边的变量,形成同一个指向。类似他们都是一把钥匙，修改的都是一个房间的东西。例：
						$variable_two = &$variable;
						包括在函数里想引用外面传进来的变量的地址的话，也是需要使用引址运算符的，例：
						$variable = ***;
						function change(&$var){
							$var = 'change value';
						}
						或者闭包里的匿名函数可以使用use关键字来更明确的表示引用外部变量，例：
						function (常规实参) use (引用的外部变量){
							外部变量 = ********;
						}
						change($variable);
``						反引号为外壳命令运算符，表示对PHP所运行环境的运行一些系统命令，并返回执行后的内容,同等shell_exec函数
						如linux下 $ll = `ls -al`;
@						错误控制运算符,当将其放置在一个 PHP 表达式之前，该表达式可能产生的任何错误信息都被忽略掉
函数默认值					函数的默认值不但可以设置默认值，还可以设置类型，例： fn(int $variable,$variable2 = 'it is default'){}


■模式■
单态模式					PHP单态模式特点不new，也不允许new，的情况下使用静态方法和属性去完成一个类的操作
对象的串行化（序列化）				对象类似转成toString，存储起来，下次就可以再直接生成被保存时候的对象的各种状态和信息（前提是被保存的对象需要依赖进来后才可以再生成），方法如下：
						serialize  把对象串行化  |  unserialize  把串行化的对象字符串解析成对象  |  魔术方法 =>  __sleep() and  __wakeup()


■手册■
http://devdocs.io/php/



























































